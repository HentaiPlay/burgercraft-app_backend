// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Модели
model Role {
  @@map("roles")
  id            Int       @id @default(autoincrement())
  name          RoleType  @unique
  accessList    Json      @map("access_list")
  user          User[]
}

model User {
  @@map("users")
  id            Int       @id @default(autoincrement())
  name          String    @unique
  password      String
  avatar        String    @default("default.png")
  roleId        Int       @map("role_id")
  role          Role      @relation(fields: [roleId], references: [id])
  burger        Burger[]
  createdAt     DateTime  @default(now()) @map("created_at")
}

model Product {
  @@map("products")
  id            Int       @id @default(autoincrement())
  name          String    @unique
  type          ProductType
  slug          String
  photoPath     String    @map("photo_path")
  price         Int
  burgerIngredient BurgerIngredient[]
}

model Burger {
  @@map("burgers")
  id            Int       @id @default(autoincrement())
  price         Int
  createdAt     DateTime  @default(now()) @map("created_at")
  crafterId     Int       @map("crafter_id")
  user          User      @relation(fields: [crafterId], references: [id])
  burgerIngredient BurgerIngredient[]
}

model BurgerIngredient {
  @@map("burgers_ingredients")
  id            Int       @id @default(autoincrement())
  burgerId      Int       @map("burger_id")
  burger        Burger    @relation(fields: [burgerId], references: [id], onDelete: Cascade)
  ingredientId  Int       @map("ingredient_id")
  ingredient    Product   @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
}

// Типы
enum RoleType {
  admin
  crafter
}

enum ProductType {
  burger_ingredient
  snack
  sauce
  drink
}
